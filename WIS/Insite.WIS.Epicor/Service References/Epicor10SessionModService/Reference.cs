//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insite.WIS.Epicor.Epicor10SessionModService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorFaultDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Insite.WIS.Epicor.Epicor10SessionModService.EpicorExceptionData[] DataListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionKindValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exKindQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exceptionQualifiedNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Insite.WIS.Epicor.Epicor10SessionModService.EpicorExceptionData[] DataList {
            get {
                return this.DataListField;
            }
            set {
                if ((object.ReferenceEquals(this.DataListField, value) != true)) {
                    this.DataListField = value;
                    this.RaisePropertyChanged("DataList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionKindValue {
            get {
                return this.ExceptionKindValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionKindValueField, value) != true)) {
                    this.ExceptionKindValueField = value;
                    this.RaisePropertyChanged("ExceptionKindValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exKindQualifiedName {
            get {
                return this.m_exKindQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exKindQualifiedNameField, value) != true)) {
                    this.m_exKindQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exKindQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exceptionQualifiedName {
            get {
                return this.m_exceptionQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exceptionQualifiedNameField, value) != true)) {
                    this.m_exceptionQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exceptionQualifiedName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorExceptionData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorExceptionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int m_ColumnNumberField;
        
        private int m_LineNumberField;
        
        private string m_MessageField;
        
        private string[] m_MessageDetailsField;
        
        private string m_MethodField;
        
        private string m_ProgramField;
        
        private System.Collections.Generic.Dictionary<string, string> m_PropertiesField;
        
        private string m_TraceStackField;
        
        private System.Collections.Generic.Dictionary<string, string> m_UserPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_ColumnNumber {
            get {
                return this.m_ColumnNumberField;
            }
            set {
                if ((this.m_ColumnNumberField.Equals(value) != true)) {
                    this.m_ColumnNumberField = value;
                    this.RaisePropertyChanged("m_ColumnNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_LineNumber {
            get {
                return this.m_LineNumberField;
            }
            set {
                if ((this.m_LineNumberField.Equals(value) != true)) {
                    this.m_LineNumberField = value;
                    this.RaisePropertyChanged("m_LineNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Message {
            get {
                return this.m_MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageField, value) != true)) {
                    this.m_MessageField = value;
                    this.RaisePropertyChanged("m_Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] m_MessageDetails {
            get {
                return this.m_MessageDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageDetailsField, value) != true)) {
                    this.m_MessageDetailsField = value;
                    this.RaisePropertyChanged("m_MessageDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Method {
            get {
                return this.m_MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MethodField, value) != true)) {
                    this.m_MethodField = value;
                    this.RaisePropertyChanged("m_Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Program {
            get {
                return this.m_ProgramField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ProgramField, value) != true)) {
                    this.m_ProgramField = value;
                    this.RaisePropertyChanged("m_Program");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_Properties {
            get {
                return this.m_PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_PropertiesField, value) != true)) {
                    this.m_PropertiesField = value;
                    this.RaisePropertyChanged("m_Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_TraceStack {
            get {
                return this.m_TraceStackField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TraceStackField, value) != true)) {
                    this.m_TraceStackField = value;
                    this.RaisePropertyChanged("m_TraceStack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_UserProperties {
            get {
                return this.m_UserPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_UserPropertiesField, value) != true)) {
                    this.m_UserPropertiesField = value;
                    this.RaisePropertyChanged("m_UserProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.SessionModTableset))]
    public partial class IceTableset : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionModTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SessionModTableset : Insite.WIS.Epicor.Epicor10SessionModService.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Insite.WIS.Epicor.Epicor10SessionModService.SessionModTable SessionModField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Insite.WIS.Epicor.Epicor10SessionModService.SessionModTable SessionMod {
            get {
                return this.SessionModField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionModField, value) != true)) {
                    this.SessionModField = value;
                    this.RaisePropertyChanged("SessionMod");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SessionModTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="SessionModRow")]
    [System.SerializableAttribute()]
    public class SessionModTable : System.Collections.Generic.List<Insite.WIS.Epicor.Epicor10SessionModService.SessionModRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionModRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class SessionModRow : Insite.WIS.Epicor.Epicor10SessionModService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamDesc {
            get {
                return this.ParamDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamDescField, value) != true)) {
                    this.ParamDescField = value;
                    this.RaisePropertyChanged("ParamDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamName {
            get {
                return this.ParamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamNameField, value) != true)) {
                    this.ParamNameField = value;
                    this.RaisePropertyChanged("ParamName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamValue {
            get {
                return this.ParamValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamValueField, value) != true)) {
                    this.ParamValueField = value;
                    this.RaisePropertyChanged("ParamValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TempRowBase", Namespace="http://schemas.datacontract.org/2004/07/Epicor.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.SessionModRow))]
    public partial class TempRowBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceRow", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.SessionModRow))]
    public partial class IceRow : Insite.WIS.Epicor.Epicor10SessionModService.TempRowBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowModField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SpecifiedPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SysRowIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowMod {
            get {
                return this.RowModField;
            }
            set {
                if ((object.ReferenceEquals(this.RowModField, value) != true)) {
                    this.RowModField = value;
                    this.RaisePropertyChanged("RowMod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SpecifiedProperties {
            get {
                return this.SpecifiedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecifiedPropertiesField, value) != true)) {
                    this.SpecifiedPropertiesField = value;
                    this.RaisePropertyChanged("SpecifiedProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SysRowID {
            get {
                return this.SysRowIDField;
            }
            set {
                if ((this.SysRowIDField.Equals(value) != true)) {
                    this.SysRowIDField = value;
                    this.RaisePropertyChanged("SysRowID");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Ice:Lib:SessionMod", ConfigurationName="Epicor10SessionModService.SessionModSvcContract")]
    public interface SessionModSvcContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCountryGroupCode", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetCountryGroupCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCountryGroupCodeEpicorFaultDetailFaul" +
            "t", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeResponse GetCountryGroupCode(Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCountryGroupCode", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetCountryGroupCodeResponse")]
        System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeResponse> GetCountryGroupCodeAsync(Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetSolutionID", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetSolutionIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetSolutionIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="solutionID")]
        string GetSolutionID(string userID, string companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetSolutionID", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetSolutionIDResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="solutionID")]
        System.Threading.Tasks.Task<string> GetSolutionIDAsync(string userID, string companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetLicense", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetLicenseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetLicenseEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseResponse GetLicense(Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetLicense", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetLicenseResponse")]
        System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseResponse> GetLicenseAsync(Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetModuleAccess", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetModuleAccessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetModuleAccessEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="moduleAccessList")]
        System.Collections.Generic.Dictionary<System.Guid, bool> GetModuleAccess();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetModuleAccess", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetModuleAccessResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="moduleAccessList")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, bool>> GetModuleAccessAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetCompany", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetCompanyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetCompanyEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyResponse SetCompany(Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetCompany", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetCompanyResponse")]
        System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyResponse> SetCompanyAsync(Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetDateFormat", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetDateFormatResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetDateFormatEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void SetDateFormat(string dateFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetDateFormat", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetDateFormatResponse")]
        System.Threading.Tasks.Task SetDateFormatAsync(string dateFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetEmployee", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetEmployeeEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void SetEmployee(string employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetEmployee", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetEmployeeResponse")]
        System.Threading.Tasks.Task SetEmployeeAsync(string employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetLanguage", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetLanguageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetLanguageEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void SetLanguage(string languageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetLanguage", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetLanguageResponse")]
        System.Threading.Tasks.Task SetLanguageAsync(string languageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetPlant", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetPlantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetPlantEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="plantName")]
        string SetPlant(string newPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetPlant", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetPlantResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="plantName")]
        System.Threading.Tasks.Task<string> SetPlantAsync(string newPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetUser", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetUserEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void SetUser(string uid, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetUser", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetUserResponse")]
        System.Threading.Tasks.Task SetUserAsync(string uid, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetWorkstation", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetWorkstationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetWorkstationEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="workstationDescription")]
        string SetWorkstation(string newWorkstationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetWorkstation", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetWorkstationResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="workstationDescription")]
        System.Threading.Tasks.Task<string> SetWorkstationAsync(string newWorkstationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetTaskClientID", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetTaskClientIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SetTaskClientIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="taskClientID")]
        string SetTaskClientID(string environmentUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/SetTaskClientID", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SetTaskClientIDResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="taskClientID")]
        System.Threading.Tasks.Task<string> SetTaskClientIDAsync(string environmentUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Handshake", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void Handshake(System.Version clientVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Handshake", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeResponse")]
        System.Threading.Tasks.Task HandshakeAsync(System.Version clientVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeBaseVersion", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeBaseVersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeBaseVersionEpicorFaultDetailFau" +
            "lt", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void HandshakeBaseVersion(System.Version clientVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeBaseVersion", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/HandshakeBaseVersionResponse")]
        System.Threading.Tasks.Task HandshakeBaseVersionAsync(System.Version clientVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Sync", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SyncResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/SyncEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        Insite.WIS.Epicor.Epicor10SessionModService.SyncResponse Sync(Insite.WIS.Epicor.Epicor10SessionModService.SyncRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Sync", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/SyncResponse")]
        System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.SyncResponse> SyncAsync(Insite.WIS.Epicor.Epicor10SessionModService.SyncRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Login", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/LoginEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Guid Login();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Login", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/LoginResponse")]
        System.Threading.Tasks.Task<System.Guid> LoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Logout", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/LogoutEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/Logout", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetLanguage", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetLanguageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetLanguageEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        string GetLanguage();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetLanguage", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetLanguageResponse")]
        System.Threading.Tasks.Task<string> GetLanguageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/InMobileConnect", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/InMobileConnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/InMobileConnectEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        bool InMobileConnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/InMobileConnect", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/InMobileConnectResponse")]
        System.Threading.Tasks.Task<bool> InMobileConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/IsValidSession", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/IsValidSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/IsValidSessionEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        bool IsValidSession(string sessionID, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/IsValidSession", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/IsValidSessionResponse")]
        System.Threading.Tasks.Task<bool> IsValidSessionAsync(string sessionID, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCustomVersion", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetCustomVersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCustomVersionEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        string GetCustomVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCustomVersion", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetCustomVersionResponse")]
        System.Threading.Tasks.Task<string> GetCustomVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevel", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Version GetPatchLevel();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevel", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelResponse")]
        System.Threading.Tasks.Task<System.Version> GetPatchLevelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelAppResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelAppEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Version GetPatchLevelApp();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetPatchLevelAppResponse")]
        System.Threading.Tasks.Task<System.Version> GetPatchLevelAppAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetRequiredDBVersionApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetRequiredDBVersionAppResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetRequiredDBVersionAppEpicorFaultDetail" +
            "Fault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Version GetRequiredDBVersionApp();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetRequiredDBVersionApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetRequiredDBVersionAppResponse")]
        System.Threading.Tasks.Task<System.Version> GetRequiredDBVersionAppAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetSystemCodeApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetSystemCodeAppResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetSystemCodeAppEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        string GetSystemCodeApp();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetSystemCodeApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetSystemCodeAppResponse")]
        System.Threading.Tasks.Task<string> GetSystemCodeAppAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevel", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Version GetBaseLevel();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevel", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelResponse")]
        System.Threading.Tasks.Task<System.Version> GetBaseLevelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelAppResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelAppEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Version GetBaseLevelApp();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelApp", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetBaseLevelAppResponse")]
        System.Threading.Tasks.Task<System.Version> GetBaseLevelAppAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetServerInfo", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetServerInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetServerInfoEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        Insite.WIS.Epicor.Epicor10SessionModService.SessionModTableset GetServerInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetServerInfo", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetServerInfoResponse")]
        System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.SessionModTableset> GetServerInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCurrentValues", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetCurrentValuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Insite.WIS.Epicor.Epicor10SessionModService.EpicorFaultDetail), Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCurrentValuesEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesResponse GetCurrentValues(Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:Lib:SessionMod/SessionModSvcContract/GetCurrentValues", ReplyAction="Ice:Lib:SessionMod/SessionModSvcContract/GetCurrentValuesResponse")]
        System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesResponse> GetCurrentValuesAsync(Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCountryGroupCode", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class GetCountryGroupCodeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string companyID;
        
        public GetCountryGroupCodeRequest() {
        }
        
        public GetCountryGroupCodeRequest(string companyID) {
            this.companyID = companyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCountryGroupCodeResponse", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class GetCountryGroupCodeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string countryGroupCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=1)]
        public string countryCode;
        
        public GetCountryGroupCodeResponse() {
        }
        
        public GetCountryGroupCodeResponse(string countryGroupCode, string countryCode) {
            this.countryGroupCode = countryGroupCode;
            this.countryCode = countryCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLicense", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class GetLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string companyID;
        
        public GetLicenseRequest() {
        }
        
        public GetLicenseRequest(string companyID) {
            this.companyID = companyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLicenseResponse", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class GetLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public int maxUsers;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=1)]
        public int maxDCUsers;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=2)]
        public System.Guid installationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=3)]
        public System.Nullable<System.DateTime> evalExpires;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=4)]
        public System.Guid editionNum;
        
        public GetLicenseResponse() {
        }
        
        public GetLicenseResponse(int maxUsers, int maxDCUsers, System.Guid installationID, System.Nullable<System.DateTime> evalExpires, System.Guid editionNum) {
            this.maxUsers = maxUsers;
            this.maxDCUsers = maxDCUsers;
            this.installationID = installationID;
            this.evalExpires = evalExpires;
            this.editionNum = editionNum;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCompany", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class SetCompanyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string newCompany;
        
        public SetCompanyRequest() {
        }
        
        public SetCompanyRequest(string newCompany) {
            this.newCompany = newCompany;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCompanyResponse", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class SetCompanyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=1)]
        public string plantID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=2)]
        public string plantName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=3)]
        public string workstationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=4)]
        public string workstationDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=5)]
        public string employeeID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=6)]
        public string countryGroupCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=7)]
        public string countryCode;
        
        public SetCompanyResponse() {
        }
        
        public SetCompanyResponse(string companyName, string plantID, string plantName, string workstationID, string workstationDescription, string employeeID, string countryGroupCode, string countryCode) {
            this.companyName = companyName;
            this.plantID = plantID;
            this.plantName = plantName;
            this.workstationID = workstationID;
            this.workstationDescription = workstationDescription;
            this.employeeID = employeeID;
            this.countryGroupCode = countryGroupCode;
            this.countryCode = countryCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Sync", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class SyncRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string clientDateFormat;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=1)]
        public string clientComputerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=2)]
        public int clientTerminalID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=3)]
        public bool designMode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=4)]
        public string clientUserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=5)]
        public string appserver;
        
        public SyncRequest() {
        }
        
        public SyncRequest(string clientDateFormat, string clientComputerName, int clientTerminalID, bool designMode, string clientUserName, string appserver) {
            this.clientDateFormat = clientDateFormat;
            this.clientComputerName = clientComputerName;
            this.clientTerminalID = clientTerminalID;
            this.designMode = designMode;
            this.clientUserName = clientUserName;
            this.appserver = appserver;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SyncResponse", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class SyncResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string uid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=1)]
        public bool replicatedDatabase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=2)]
        public string taskClientID;
        
        public SyncResponse() {
        }
        
        public SyncResponse(string uid, bool replicatedDatabase, string taskClientID) {
            this.uid = uid;
            this.replicatedDatabase = replicatedDatabase;
            this.taskClientID = taskClientID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentValues", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class GetCurrentValuesRequest {
        
        public GetCurrentValuesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentValuesResponse", WrapperNamespace="Ice:Lib:SessionMod", IsWrapped=true)]
    public partial class GetCurrentValuesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=0)]
        public string companyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=2)]
        public string plantID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=3)]
        public string plantName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=4)]
        public string employeeID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=5)]
        public string workstationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:Lib:SessionMod", Order=6)]
        public string systemCode;
        
        public GetCurrentValuesResponse() {
        }
        
        public GetCurrentValuesResponse(string companyID, string companyName, string plantID, string plantName, string employeeID, string workstationID, string systemCode) {
            this.companyID = companyID;
            this.companyName = companyName;
            this.plantID = plantID;
            this.plantName = plantName;
            this.employeeID = employeeID;
            this.workstationID = workstationID;
            this.systemCode = systemCode;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SessionModSvcContractChannel : Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionModSvcContractClient : System.ServiceModel.ClientBase<Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract>, Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract {
        
        public SessionModSvcContractClient() {
        }
        
        public SessionModSvcContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionModSvcContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionModSvcContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionModSvcContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeResponse Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract.GetCountryGroupCode(Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeRequest request) {
            return base.Channel.GetCountryGroupCode(request);
        }
        
        public string GetCountryGroupCode(string companyID, out string countryCode) {
            Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeRequest inValue = new Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeRequest();
            inValue.companyID = companyID;
            Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeResponse retVal = ((Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract)(this)).GetCountryGroupCode(inValue);
            countryCode = retVal.countryCode;
            return retVal.countryGroupCode;
        }
        
        public System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeResponse> GetCountryGroupCodeAsync(Insite.WIS.Epicor.Epicor10SessionModService.GetCountryGroupCodeRequest request) {
            return base.Channel.GetCountryGroupCodeAsync(request);
        }
        
        public string GetSolutionID(string userID, string companyID) {
            return base.Channel.GetSolutionID(userID, companyID);
        }
        
        public System.Threading.Tasks.Task<string> GetSolutionIDAsync(string userID, string companyID) {
            return base.Channel.GetSolutionIDAsync(userID, companyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseResponse Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract.GetLicense(Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseRequest request) {
            return base.Channel.GetLicense(request);
        }
        
        public int GetLicense(string companyID, out int maxDCUsers, out System.Guid installationID, out System.Nullable<System.DateTime> evalExpires, out System.Guid editionNum) {
            Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseRequest inValue = new Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseRequest();
            inValue.companyID = companyID;
            Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseResponse retVal = ((Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract)(this)).GetLicense(inValue);
            maxDCUsers = retVal.maxDCUsers;
            installationID = retVal.installationID;
            evalExpires = retVal.evalExpires;
            editionNum = retVal.editionNum;
            return retVal.maxUsers;
        }
        
        public System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseResponse> GetLicenseAsync(Insite.WIS.Epicor.Epicor10SessionModService.GetLicenseRequest request) {
            return base.Channel.GetLicenseAsync(request);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, bool> GetModuleAccess() {
            return base.Channel.GetModuleAccess();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, bool>> GetModuleAccessAsync() {
            return base.Channel.GetModuleAccessAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyResponse Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract.SetCompany(Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyRequest request) {
            return base.Channel.SetCompany(request);
        }
        
        public string SetCompany(string newCompany, out string plantID, out string plantName, out string workstationID, out string workstationDescription, out string employeeID, out string countryGroupCode, out string countryCode) {
            Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyRequest inValue = new Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyRequest();
            inValue.newCompany = newCompany;
            Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyResponse retVal = ((Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract)(this)).SetCompany(inValue);
            plantID = retVal.plantID;
            plantName = retVal.plantName;
            workstationID = retVal.workstationID;
            workstationDescription = retVal.workstationDescription;
            employeeID = retVal.employeeID;
            countryGroupCode = retVal.countryGroupCode;
            countryCode = retVal.countryCode;
            return retVal.companyName;
        }
        
        public System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyResponse> SetCompanyAsync(Insite.WIS.Epicor.Epicor10SessionModService.SetCompanyRequest request) {
            return base.Channel.SetCompanyAsync(request);
        }
        
        public void SetDateFormat(string dateFormat) {
            base.Channel.SetDateFormat(dateFormat);
        }
        
        public System.Threading.Tasks.Task SetDateFormatAsync(string dateFormat) {
            return base.Channel.SetDateFormatAsync(dateFormat);
        }
        
        public void SetEmployee(string employeeID) {
            base.Channel.SetEmployee(employeeID);
        }
        
        public System.Threading.Tasks.Task SetEmployeeAsync(string employeeID) {
            return base.Channel.SetEmployeeAsync(employeeID);
        }
        
        public void SetLanguage(string languageID) {
            base.Channel.SetLanguage(languageID);
        }
        
        public System.Threading.Tasks.Task SetLanguageAsync(string languageID) {
            return base.Channel.SetLanguageAsync(languageID);
        }
        
        public string SetPlant(string newPlant) {
            return base.Channel.SetPlant(newPlant);
        }
        
        public System.Threading.Tasks.Task<string> SetPlantAsync(string newPlant) {
            return base.Channel.SetPlantAsync(newPlant);
        }
        
        public void SetUser(string uid, string password) {
            base.Channel.SetUser(uid, password);
        }
        
        public System.Threading.Tasks.Task SetUserAsync(string uid, string password) {
            return base.Channel.SetUserAsync(uid, password);
        }
        
        public string SetWorkstation(string newWorkstationID) {
            return base.Channel.SetWorkstation(newWorkstationID);
        }
        
        public System.Threading.Tasks.Task<string> SetWorkstationAsync(string newWorkstationID) {
            return base.Channel.SetWorkstationAsync(newWorkstationID);
        }
        
        public string SetTaskClientID(string environmentUserName) {
            return base.Channel.SetTaskClientID(environmentUserName);
        }
        
        public System.Threading.Tasks.Task<string> SetTaskClientIDAsync(string environmentUserName) {
            return base.Channel.SetTaskClientIDAsync(environmentUserName);
        }
        
        public void Handshake(System.Version clientVersion) {
            base.Channel.Handshake(clientVersion);
        }
        
        public System.Threading.Tasks.Task HandshakeAsync(System.Version clientVersion) {
            return base.Channel.HandshakeAsync(clientVersion);
        }
        
        public void HandshakeBaseVersion(System.Version clientVersion) {
            base.Channel.HandshakeBaseVersion(clientVersion);
        }
        
        public System.Threading.Tasks.Task HandshakeBaseVersionAsync(System.Version clientVersion) {
            return base.Channel.HandshakeBaseVersionAsync(clientVersion);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Insite.WIS.Epicor.Epicor10SessionModService.SyncResponse Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract.Sync(Insite.WIS.Epicor.Epicor10SessionModService.SyncRequest request) {
            return base.Channel.Sync(request);
        }
        
        public string Sync(string clientDateFormat, string clientComputerName, int clientTerminalID, bool designMode, string clientUserName, string appserver, out bool replicatedDatabase, out string taskClientID) {
            Insite.WIS.Epicor.Epicor10SessionModService.SyncRequest inValue = new Insite.WIS.Epicor.Epicor10SessionModService.SyncRequest();
            inValue.clientDateFormat = clientDateFormat;
            inValue.clientComputerName = clientComputerName;
            inValue.clientTerminalID = clientTerminalID;
            inValue.designMode = designMode;
            inValue.clientUserName = clientUserName;
            inValue.appserver = appserver;
            Insite.WIS.Epicor.Epicor10SessionModService.SyncResponse retVal = ((Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract)(this)).Sync(inValue);
            replicatedDatabase = retVal.replicatedDatabase;
            taskClientID = retVal.taskClientID;
            return retVal.uid;
        }
        
        public System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.SyncResponse> SyncAsync(Insite.WIS.Epicor.Epicor10SessionModService.SyncRequest request) {
            return base.Channel.SyncAsync(request);
        }
        
        public System.Guid Login() {
            return base.Channel.Login();
        }
        
        public System.Threading.Tasks.Task<System.Guid> LoginAsync() {
            return base.Channel.LoginAsync();
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public string GetLanguage() {
            return base.Channel.GetLanguage();
        }
        
        public System.Threading.Tasks.Task<string> GetLanguageAsync() {
            return base.Channel.GetLanguageAsync();
        }
        
        public bool InMobileConnect() {
            return base.Channel.InMobileConnect();
        }
        
        public System.Threading.Tasks.Task<bool> InMobileConnectAsync() {
            return base.Channel.InMobileConnectAsync();
        }
        
        public bool IsValidSession(string sessionID, string uid) {
            return base.Channel.IsValidSession(sessionID, uid);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidSessionAsync(string sessionID, string uid) {
            return base.Channel.IsValidSessionAsync(sessionID, uid);
        }
        
        public string GetCustomVersion() {
            return base.Channel.GetCustomVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetCustomVersionAsync() {
            return base.Channel.GetCustomVersionAsync();
        }
        
        public System.Version GetPatchLevel() {
            return base.Channel.GetPatchLevel();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetPatchLevelAsync() {
            return base.Channel.GetPatchLevelAsync();
        }
        
        public System.Version GetPatchLevelApp() {
            return base.Channel.GetPatchLevelApp();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetPatchLevelAppAsync() {
            return base.Channel.GetPatchLevelAppAsync();
        }
        
        public System.Version GetRequiredDBVersionApp() {
            return base.Channel.GetRequiredDBVersionApp();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetRequiredDBVersionAppAsync() {
            return base.Channel.GetRequiredDBVersionAppAsync();
        }
        
        public string GetSystemCodeApp() {
            return base.Channel.GetSystemCodeApp();
        }
        
        public System.Threading.Tasks.Task<string> GetSystemCodeAppAsync() {
            return base.Channel.GetSystemCodeAppAsync();
        }
        
        public System.Version GetBaseLevel() {
            return base.Channel.GetBaseLevel();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetBaseLevelAsync() {
            return base.Channel.GetBaseLevelAsync();
        }
        
        public System.Version GetBaseLevelApp() {
            return base.Channel.GetBaseLevelApp();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetBaseLevelAppAsync() {
            return base.Channel.GetBaseLevelAppAsync();
        }
        
        public Insite.WIS.Epicor.Epicor10SessionModService.SessionModTableset GetServerInfo() {
            return base.Channel.GetServerInfo();
        }
        
        public System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.SessionModTableset> GetServerInfoAsync() {
            return base.Channel.GetServerInfoAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesResponse Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract.GetCurrentValues(Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesRequest request) {
            return base.Channel.GetCurrentValues(request);
        }
        
        public string GetCurrentValues(out string companyName, out string plantID, out string plantName, out string employeeID, out string workstationID, out string systemCode) {
            Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesRequest inValue = new Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesRequest();
            Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesResponse retVal = ((Insite.WIS.Epicor.Epicor10SessionModService.SessionModSvcContract)(this)).GetCurrentValues(inValue);
            companyName = retVal.companyName;
            plantID = retVal.plantID;
            plantName = retVal.plantName;
            employeeID = retVal.employeeID;
            workstationID = retVal.workstationID;
            systemCode = retVal.systemCode;
            return retVal.companyID;
        }
        
        public System.Threading.Tasks.Task<Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesResponse> GetCurrentValuesAsync(Insite.WIS.Epicor.Epicor10SessionModService.GetCurrentValuesRequest request) {
            return base.Channel.GetCurrentValuesAsync(request);
        }
    }
}
