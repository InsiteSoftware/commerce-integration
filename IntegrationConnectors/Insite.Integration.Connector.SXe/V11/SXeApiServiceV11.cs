
// <auto-generated>
// This isn't auto-generated, but it keeps stylecop from complaining
// </auto-generated>

namespace Insite.Integration.Connector.SXe.V11;

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

using Insite.Common.Dependencies;
using Insite.Common.HttpUtilities;
using Insite.Common.Logging;
using Insite.Core.Interfaces.Plugins.Caching;
using Insite.Integration.Connector.SXe.V11.IonApi.Models.OEPricingMultipleV4;
using Insite.Integration.Connector.SXe.V11.IonApi.Models.SFCustomerSummary;
using Insite.Integration.Connector.SXe.V11.IonApi.Models.SFOEOrderTotLoadV4;
using Insite.Integration.Connector.SXe.V11.IonApi.Models.ARCustomerMnt;
using Insite.Integration.Connector.SXe.V11.IonApi;

internal sealed class SXeApiServiceV11 : ISXeApiServiceV11
{
    private readonly HttpClientProvider httpClientProvider;

    internal const string TokenCacheKey = "SXeApiServiceV11_IonApi_Token";

    private const string TokenApiPath = "InforIntSTS/connect/token";

    private const string SxApiRestServiceApiPath = "infor/SX/rest/sxapirestservice/";

    private const string SFCustomerSummaryApiPath = "sxapisfcustomersummary";

    private const string OEPricingMultipleV4ApiPath = "sxapioepricingmultiplev4";

    private const string SFOEOrderTotLoadV4ApiPath = "sxapisfoeordertotloadv4";

    private const string ARCustomerMntApiPath = "sxapiarcustomermnt";

    private readonly string Url;

    private readonly string AccessTokenUrl;

    private readonly string OperatorInitials;

    private readonly string OperatorPassword;

    private readonly int CompanyNumber;

    private readonly string TokenClientId;

    private readonly string TokenClientSecret;

    private readonly string TokenUserName;

    private readonly string TokenPassword;

    private readonly ICacheManager cacheManager;

    /// <summary>
    /// Initializes a new instance of the <see cref="SXeApiServiceV11"/> class.
    /// </summary>
    /// <param name="url">The url of the SXe web service.</param>
    /// <param name="accessTokenUrl">The url override for the SXe access token.</param>
    /// <param name="operatorInitials">The operator initials used to call the Ion web service.</param>
    /// <param name="operatorPassword">The operator password used to call the Ion web service..</param>
    /// <param name="companyNumber">The company number used to call the Ion web service.</param>
    /// <param name="tokenClientId">The client id used to get the OAuth token.</param>
    /// <param name="tokenClientSecret">The client secret used to get the OAuth token.</param>
    /// <param name="tokenUserName">The client user name used to get the OAuth token.</param>
    /// <param name="tokenPassword">The client password used to get the OAuth token.</param>
    public SXeApiServiceV11(
        string url,
        string accessTokenUrl,
        string operatorInitials,
        string operatorPassword,
        int companyNumber,
        string tokenClientId,
        string tokenClientSecret,
        string tokenUserName,
        string tokenPassword)
        : this(
            url,
            accessTokenUrl,
            operatorInitials,
            operatorPassword,
            companyNumber,
            tokenClientId,
            tokenClientSecret,
            tokenUserName,
            tokenPassword,
            DependencyLocator.Current.GetInstance<HttpClientProvider>())
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SXeApiServiceV11"/> class.
    /// </summary>
    /// <param name="url">The url of the SXe web service.</param>
    /// <param name="accessTokenUrl">The url override for the SXe access token.</param>
    /// <param name="operatorInitials">The operator initials used to call the Ion web service.</param>
    /// <param name="operatorPassword">The operator password used to call the Ion web service..</param>
    /// <param name="companyNumber">The company number used to call the Ion web service.</param>
    /// <param name="tokenClientId">The client id used to get the OAuth token.</param>
    /// <param name="tokenClientSecret">The client secret used to get the OAuth token.</param>
    /// <param name="tokenUserName">The client user name used to get the OAuth token.</param>
    /// <param name="tokenPassword">The client password used to get the OAuth token.</param>
    /// <param name="httpClientProvider">Provides <see cref="HttpClient"/> instances from a cache.</param>
    public SXeApiServiceV11(
        string url,
        string accessTokenUrl,
        string operatorInitials,
        string operatorPassword,
        int companyNumber,
        string tokenClientId,
        string tokenClientSecret,
        string tokenUserName,
        string tokenPassword,
        HttpClientProvider httpClientProvider)
        : this(
            url,
            accessTokenUrl,
            operatorInitials,
            operatorPassword,
            companyNumber,
            tokenClientId,
            tokenClientSecret,
            tokenUserName,
            tokenPassword,
            httpClientProvider,
            DependencyLocator.Current.GetInstance<ICacheManager>())
    {
    }

    internal SXeApiServiceV11(
        string url,
        string accessTokenUrl,
        string operatorInitials,
        string operatorPassword,
        int companyNumber,
        string tokenClientId,
        string tokenClientSecret,
        string tokenUserName,
        string tokenPassword,
        HttpClientProvider httpClientProvider,
        ICacheManager cacheManager)
    {
        this.Url = url;
        this.AccessTokenUrl = accessTokenUrl;
        this.OperatorInitials = operatorInitials;
        this.OperatorPassword = operatorPassword;
        this.CompanyNumber = companyNumber;
        this.TokenClientId = tokenClientId;
        this.TokenClientSecret = tokenClientSecret;
        this.TokenPassword = tokenPassword;
        this.TokenUserName = tokenUserName;
        this.TokenPassword = tokenPassword;
        this.httpClientProvider = httpClientProvider;
        this.cacheManager = cacheManager;
    }

    /// <summary>
    /// Executes the SFCustomerSummary with the provided <see cref="SFCustomerSummaryRequest"/>
    /// </summary>
    /// <param name="sfCustomerSummaryRequest">The <see cref="SFCustomerSummaryRequest"/>.</param>
    /// <returns>The <see cref="SFCustomerSummaryResponse"/>.</returns>
    public SFCustomerSummaryResponse SFCustomerSummary(SFCustomerSummaryRequest sfCustomerSummaryRequest)
    {
        PopulateAuthenticationProperties(sfCustomerSummaryRequest.Request, this.CompanyNumber, this.OperatorInitials, this.OperatorPassword);

        this.LogRedactingCredentials(sfCustomerSummaryRequest); // "log, redacting credentials"
        var jsonRequest = Serialize(sfCustomerSummaryRequest);

        var url = this.CreateUrl(SFCustomerSummaryApiPath);

        var jsonResponse = this.CallIonApi(url, jsonRequest);
        LogHelper.For(this).Debug($"{nameof(SFCustomerSummaryResponse)}: {jsonResponse}");

        return Deserialize<SFCustomerSummaryResponse>(jsonResponse);
    }

    /// <summary>
    /// Executes the OEPricingMultipleV4 with the provided <see cref="OEPricingMultipleV4Request"/>
    /// </summary>
    /// <param name="oePricingMultipleV4Request">The <see cref="OEPricingMultipleV4Request"/>.</param>
    /// <returns>The <see cref="OEPricingMultipleV4Response"/>.</returns>
    public OEPricingMultipleV4Response OEPricingMultipleV4(OEPricingMultipleV4Request oePricingMultipleV4Request)
    {
        PopulateAuthenticationProperties(oePricingMultipleV4Request.Request, this.CompanyNumber, this.OperatorInitials, this.OperatorPassword);

        this.LogRedactingCredentials(oePricingMultipleV4Request); // "log, redacting credentials"
        var jsonRequest = Serialize(oePricingMultipleV4Request);

        var url = this.CreateUrl(OEPricingMultipleV4ApiPath);

        var jsonResponse = this.CallIonApi(url, jsonRequest);
        LogHelper.For(this).Debug($"{nameof(OEPricingMultipleV4Response)}: {jsonResponse}");

        return Deserialize<OEPricingMultipleV4Response>(jsonResponse);
    }
    /// <summary>
    /// Executes the SFOEOrderTotLoadV4 with the provided <see cref="SFOEOrderTotLoadV4Request"/>
    /// </summary>
    /// <param name="sfoeOrderTotLoadV4Request">The <see cref="SFOEOrderTotLoadV4Request"/>.</param>
    /// <returns>The <see cref="SFOEOrderTotLoadV4Response"/>.</returns>
    public SFOEOrderTotLoadV4Response SFOEOrderTotLoadV4(SFOEOrderTotLoadV4Request sfoeOrderTotLoadV4Request)
    {
        PopulateAuthenticationProperties(sfoeOrderTotLoadV4Request.Request, this.CompanyNumber, this.OperatorInitials, this.OperatorPassword);

        this.LogRedactingCredentials(sfoeOrderTotLoadV4Request); // "log, redacting credentials"
        var jsonRequest = Serialize(sfoeOrderTotLoadV4Request);

        var url = this.CreateUrl(SFOEOrderTotLoadV4ApiPath);

        var jsonResponse = this.CallIonApi(url, jsonRequest);
        LogHelper.For(this).Debug($"{nameof(SFOEOrderTotLoadV4Response)}: {jsonResponse}");

        return Deserialize<SFOEOrderTotLoadV4Response>(jsonResponse);
    }

    /// <summary>
    /// Executes the ARCustomerMnt with the provided <see cref="ARCustomerMntRequest"/>
    /// </summary>
    /// <param name="arCustomerMntRequest">The <see cref="ARCustomerMntRequest"/>.</param>
    /// <returns>The <see cref="ARCustomerMntResponse"/>.</returns>
    public ARCustomerMntResponse ARCustomerMnt(ARCustomerMntRequest arCustomerMntRequest)
    {
        PopulateAuthenticationProperties(arCustomerMntRequest.Request, this.CompanyNumber, this.OperatorInitials, this.OperatorPassword);

        this.LogRedactingCredentials(arCustomerMntRequest); // "log, redacting credentials"
        var jsonRequest = Serialize(arCustomerMntRequest);

        var url = this.CreateUrl(ARCustomerMntApiPath);

        var jsonResponse = this.CallIonApi(url, jsonRequest, shouldSkipBadRequestError: true);
        LogHelper.For(this).Debug($"{nameof(ARCustomerMntResponse)}: {jsonResponse}");

        return Deserialize<ARCustomerMntResponse>(jsonResponse);
    }

    private string GetToken()
    {
        var token = this.cacheManager.Get<string>(TokenCacheKey);
            
        if (token != null)
        {
            return token;
        }
            
        LogHelper.For(this).Debug("Requesting Access Token");

        var url = this.CreateAccessTokenUrl();
        var content = GetTokenRequestContent(this.TokenClientId, this.TokenClientSecret, this.TokenUserName, this.TokenPassword).ReadAsStringAsync().Result;

        var response = this.CallIonApi(url, content, false, "application/x-www-form-urlencoded");
        LogHelper.For(this).Debug($"Got a token in response: [redacted]");

        token = (string)JsonConvert.DeserializeObject<dynamic>(response).access_token;
        var tokenExpiration = GetTokenExpiration(response);

        this.cacheManager.Add(TokenCacheKey, token, tokenExpiration);
             
        return token;
    }

    private string CallIonApi(string url, string content, bool shouldSetAuthorizationHeader = true, string contentType = "application/json", int retryAttempt = 0, bool shouldSkipBadRequestError = false)
    {

        var httpClient = this.httpClientProvider.GetHttpClient(new Uri(url));
        var httpContent = new StringContent(content, Encoding.UTF8, contentType );
        var httpRequest = new HttpRequestMessage(HttpMethod.Post, string.Empty)
        {
            Content = httpContent,
        };
        httpRequest.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        if (shouldSetAuthorizationHeader)
        {
            httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", this.GetToken());
        }

        var httpResponse = httpClient.SendAsync(httpRequest).Result;
        if (httpResponse == null)
        {
            throw new DataException("Error calling ION Api. Response is null.");
        }

        if (httpResponse.StatusCode == HttpStatusCode.Unauthorized && retryAttempt < 3)
        {
            LogHelper.For(this).Warn("API service returned unauthorized response. Refreshing token and attempting call again.");
            this.cacheManager.Remove(TokenCacheKey);
            return this.CallIonApi(url, content, shouldSetAuthorizationHeader, "application/json", retryAttempt + 1);
        }

        if (!httpResponse.IsSuccessStatusCode && !(shouldSkipBadRequestError && httpResponse.StatusCode == HttpStatusCode.BadRequest))
        {
            throw new DataException($"Error calling ION Api. Status Code: {httpResponse.StatusCode}. Reason Phrase: {httpResponse.ReasonPhrase}.");
        }

        return httpResponse.Content.ReadAsStringAsync().Result;
    }

    private static HttpContent GetTokenRequestContent(string tokenClientId, string tokenClientSecret, string tokenUserName, string tokenPassword)
    {
        return new FormUrlEncodedContent(new Dictionary<string, string>
        {
            { "client_id", tokenClientId },
            { "client_secret", tokenClientSecret },
            { "grant_type", "password" },
            { "username", tokenUserName },
            { "password", tokenPassword }
        });
    }

    private static TimeSpan GetTokenExpiration(string response)
    {
        try
        {
            return TimeSpan.FromSeconds((int)JsonConvert.DeserializeObject<dynamic>(response).expires_in);
        }
        catch
        {
            return TimeSpan.FromSeconds(300);
        }
    }

    private string CreateUrl(string apiPath)
    {
        var uri = new Uri(this.Url);

        // use the defined path of the service if exists
        return uri.GetComponents(UriComponents.AbsoluteUri, UriFormat.Unescaped)
               + (uri.AbsolutePath.Equals("/") ? SxApiRestServiceApiPath : "")
               + apiPath;
    }

    private string CreateAccessTokenUrl()
    {
        if (!this.AccessTokenUrl.IsBlank())
        {
            return this.AccessTokenUrl;
        }

        // strip port number for token calls
        return new Uri(this.Url).GetComponents(UriComponents.AbsoluteUri & ~UriComponents.Port, UriFormat.UriEscaped) + TokenApiPath;
    }

    private static void PopulateAuthenticationProperties<T>(T request, int companyNumber, string operatorInitials, string operatorPassword)
        where T : class
    {
        SetProperty<T>(request, "CompanyNumber", companyNumber);
        SetProperty<T>(request, "OperatorInit", operatorInitials);
        SetProperty<T>(request, "OperatorPassword", operatorPassword);
    }

    private static void SetProperty<T>(object destination, string propertyName, object value)
        where T : class
    {
        var propertyInfo = typeof(T).GetProperties().FirstOrDefault(o => o.Name.Equals(propertyName, StringComparison.OrdinalIgnoreCase));
        if (propertyInfo == null)
        {
            return;
        }

        propertyInfo.SetValue(destination, value);
    }

    private static string Serialize<T>(T request)
    {
        try
        {
            return JsonConvert.SerializeObject(request, new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver(),
                NullValueHandling = NullValueHandling.Ignore
            });
        }
        catch (Exception exception)
        {
            throw new Exception(
                $"Error serializing {typeof(T)} to Json request. Message: {exception.Message}.",
                exception);
        }
    }

    private static T Deserialize<T>(string response)
    {
        try
        {
            return JsonConvert.DeserializeObject<T>(response, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
        }
        catch (Exception exception)
        {
            throw new Exception(
                $"Error deserializing Json response to {typeof(T)}. Json Response: {response}. Message: {exception.Message}.",
                exception);
        }
    }

    /// <summary>
    /// Redact the OperatorInit and OperatorPassword fields so their real values don't end up
    /// in the debugging output, do the output, and then restore the real values
    /// </summary>
    /// <param name="requestWrapper"></param>
    private void LogRedactingCredentials(object requestWrapper)
    {
        if (requestWrapper == null)
            return;

        var oePricingRequestWrapper = requestWrapper as OEPricingMultipleV4Request;
        var sfoeOrderRequestWrapper = requestWrapper as SFOEOrderTotLoadV4Request;
        var sfCustomerRequestWrapper = requestWrapper as SFCustomerSummaryRequest;
        var arCustomerRequestWrapper = requestWrapper as ARCustomerMntRequest;

        const string redacted = "[redacted]";
        IRequest request = null;
        string pass = null;
        string user = null;
        string name = null;

        if (oePricingRequestWrapper != null)
        {
            request = oePricingRequestWrapper.Request;
            name = nameof(OEPricingMultipleV4Request);
        }
        else if (sfoeOrderRequestWrapper != null)
        {
            request = sfoeOrderRequestWrapper.Request;
            name = nameof(SFOEOrderTotLoadV4Request);
        }
        else if (sfCustomerRequestWrapper != null)
        {
            request = sfCustomerRequestWrapper.Request;
            name = nameof(SFCustomerSummaryRequest);
        }
        else if (arCustomerRequestWrapper != null)
        {
            request = arCustomerRequestWrapper.Request;
            name = nameof(ARCustomerMntRequest);
        }
        else
            return;

        pass = request.OperatorPassword;
        user = request.OperatorInit;

        request.OperatorPassword = redacted;
        request.OperatorInit = redacted;

        var serializedRequest = Serialize(requestWrapper);
        LogHelper.For(this).Debug($"{name}: {serializedRequest}");

        request.OperatorPassword = pass;
        request.OperatorInit = user;
    }
}